/*
 * Copyright (C) 2024 koalium
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package departed;

import com.fazecast.jSerialComm.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author koalium
 */
public class Form extends javax.swing.JFrame {

	

	/**
	 * Creates new form form
	 */
	public Form() throws IOException {
		this.vcmd = new Vector();
		initfomponents();
		initComponents();
		initAddPorts();
		
		timi();
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jOptionPaneOk = new javax.swing.JOptionPane();
                jPanel1 = new javax.swing.JPanel();
                jPanel22 = new javax.swing.JPanel();
                jLabelWrite = new javax.swing.JLabel();
                jPanel23 = new javax.swing.JPanel();
                jLabelStatus = new javax.swing.JLabel();
                menuBar = new javax.swing.JMenuBar();
                fileMenu = new javax.swing.JMenu();
                openMenuItem = new javax.swing.JMenuItem();
                saveMenuItem = new javax.swing.JMenuItem();
                saveAsMenuItem = new javax.swing.JMenuItem();
                exitMenuItem = new javax.swing.JMenuItem();
                MenuConnect = new javax.swing.JMenu();
                jMenuPorts = new javax.swing.JMenu();
                jMenuItem1 = new javax.swing.JMenuItem();
                MenuItemCheckConnection = new javax.swing.JMenuItem();
                MenuItemRefresh = new javax.swing.JMenuItem();
                MenuItemCloseConnection = new javax.swing.JMenuItem();
                helpMenu = new javax.swing.JMenu();
                jMenuItemLog = new javax.swing.JMenuItem();
                contentsMenuItem = new javax.swing.JMenuItem();
                aboutMenuItem = new javax.swing.JMenuItem();

                jOptionPaneOk.setMessage("ÙŽAre you Sure?");
                jOptionPaneOk.setWantsInput(true);
                jOptionPaneOk.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Forming Tools");
                setName("frameMain"); // NOI18N

                jPanel1.setBackground(new java.awt.Color(153, 153, 255));
                jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, java.awt.Color.gray));

                jPanel22.setBackground(new java.awt.Color(153, 153, 255));

                jLabelWrite.setForeground(new java.awt.Color(51, 0, 51));
                jLabelWrite.setText("copyRights Koalium Ltd.2032");

                javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
                jPanel22.setLayout(jPanel22Layout);
                jPanel22Layout.setHorizontalGroup(
                        jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelWrite, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                );
                jPanel22Layout.setVerticalGroup(
                        jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelWrite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );

                jPanel23.setBackground(new java.awt.Color(153, 153, 255));

                jLabelStatus.setForeground(new java.awt.Color(51, 0, 51));
                jLabelStatus.setText("not connected yet...");

                javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
                jPanel23.setLayout(jPanel23Layout);
                jPanel23Layout.setHorizontalGroup(
                        jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                .addContainerGap())
                );
                jPanel23Layout.setVerticalGroup(
                        jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                );

                fileMenu.setMnemonic('f');
                fileMenu.setText("File");

                openMenuItem.setMnemonic('o');
                openMenuItem.setText("Open");
                openMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                openMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(openMenuItem);

                saveMenuItem.setMnemonic('s');
                saveMenuItem.setText("Save");
                saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(saveMenuItem);

                saveAsMenuItem.setMnemonic('a');
                saveAsMenuItem.setText("Save As ...");
                saveAsMenuItem.setDisplayedMnemonicIndex(5);
                saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveAsMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(saveAsMenuItem);

                exitMenuItem.setMnemonic('x');
                exitMenuItem.setText("Exit");
                exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exitMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(exitMenuItem);

                menuBar.add(fileMenu);

                MenuConnect.setMnemonic('c');
                MenuConnect.setText("Connection");

                jMenuPorts.setText("Ports");

                jMenuItem1.setText("jMenuItem1");
                jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItem1ActionPerformed(evt);
                        }
                });
                jMenuPorts.add(jMenuItem1);

                MenuConnect.add(jMenuPorts);

                MenuItemCheckConnection.setMnemonic('h');
                MenuItemCheckConnection.setText("Check");
                MenuItemCheckConnection.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemCheckConnectionActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemCheckConnection);

                MenuItemRefresh.setMnemonic('r');
                MenuItemRefresh.setText("Refresh");
                MenuItemRefresh.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemRefreshActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemRefresh);

                MenuItemCloseConnection.setMnemonic('c');
                MenuItemCloseConnection.setText("Close");
                MenuItemCloseConnection.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                MenuItemCloseConnectionActionPerformed(evt);
                        }
                });
                MenuConnect.add(MenuItemCloseConnection);

                menuBar.add(MenuConnect);

                helpMenu.setMnemonic('h');
                helpMenu.setText("Help");

                jMenuItemLog.setText("log");
                jMenuItemLog.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItemLogActionPerformed(evt);
                        }
                });
                helpMenu.add(jMenuItemLog);

                contentsMenuItem.setMnemonic('c');
                contentsMenuItem.setText("Contents");
                contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                contentsMenuItemActionPerformed(evt);
                        }
                });
                helpMenu.add(contentsMenuItem);

                aboutMenuItem.setMnemonic('a');
                aboutMenuItem.setText("About");
                aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                aboutMenuItemActionPerformed(evt);
                        }
                });
                helpMenu.add(aboutMenuItem);

                menuBar.add(helpMenu);

                setJMenuBar(menuBar);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
	    System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

        private void MenuItemCheckConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCheckConnectionActionPerformed
                // TODO add your handling code here:
		if(sp==null){
			jLabelStatus.setText("serial port not stablished...");
		}else{
			if(sp.isOpen()){
				if(handshaked){
					jLabelStatus.setText("port is open and handshaked");
				}else{
					jLabelStatus.setText("port is open but not handshaked");
				}
				
			}else{
				jLabelStatus.setText("port not opened yet...");
			}
		}
               
        }//GEN-LAST:event_MenuItemCheckConnectionActionPerformed

        private void MenuItemRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRefreshActionPerformed
                // TODO add your handling code here:
               jLabelStatus.setText("port Refreshed...");
		initAddPorts();

        }//GEN-LAST:event_MenuItemRefreshActionPerformed

        private void MenuItemCloseConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCloseConnectionActionPerformed
                // TODO add your handling code here:
                if(sp!=null && sp.isOpen()){
			jLabelStatus.setText("port closed...");
			sp.closePort();
		}

        }//GEN-LAST:event_MenuItemCloseConnectionActionPerformed

        private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
		readsaveddata();
        }//GEN-LAST:event_openMenuItemActionPerformed

        private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
		savingdata();
		jLabelStatus.setText("saving to file...");
        }//GEN-LAST:event_saveMenuItemActionPerformed

        private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
		savingdata();
		jLabelStatus.setText("saved in new file...");
        }//GEN-LAST:event_saveAsMenuItemActionPerformed

        private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
                // TODO add your handling code here:
        }//GEN-LAST:event_jMenuItem1ActionPerformed

        private void jMenuItemLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLogActionPerformed
                // TODO add your handling code here:
		if(log==null){
			log = new Log();
		}
		if(log.isVisible()){
			log.setVisible(false);
			jLabelStatus.setText("close logger..");
		}else{
			log.setVisible(true);
			jLabelStatus.setText("logger opened now...");
		}
		
        }//GEN-LAST:event_jMenuItemLogActionPerformed

        private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
                // TODO add your handling code here:
		jLabelStatus.setText("content to show from koalium ltd...");
        }//GEN-LAST:event_contentsMenuItemActionPerformed

        private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
                // TODO add your handling code here:
		jLabelStatus.setText("licensed and copywrite by koalium ltd...");
        }//GEN-LAST:event_aboutMenuItemActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>
		
		//</editor-fold>
		//</editor-fold>

		/* Create and display the Form */
		java.awt.EventQueue.invokeLater(() -> {
			try {
				new Form().setVisible(true);
			} catch (IOException ex) {
				Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
			}
		});
	}

	private void initAddPorts(){
		
		jMenuPorts.removeAll();
		
		SerialPort[] AvailablePorts = SerialPort.getCommPorts();
		for (SerialPort AvailablePort : AvailablePorts) {
			javax.swing.JMenuItem jMenuItem = new javax.swing.JMenuItem();
			jMenuItem.setText(AvailablePort.getSystemPortName());
			jMenuItem.addActionListener((java.awt.event.ActionEvent evt) -> {
				sp = SerialPort.getCommPort(jMenuItem.getText());
				sp.openPort(20);
				sp.setComPortParameters( BaudRate, DataBits, StopBits, Parity);
				sp.setComPortTimeouts(SerialPort.TIMEOUT_NONBLOCKING, 0, 0);
				if(sp.openPort()){
					connected=true;
					ctrl.setVisible(true);
					mon.setVisible(true);
					setmode(CHANGE_MODE_IDLE);
					
				}
				
			});
			jMenuPorts.add(jMenuItem);
	
		}
	}
	
	//
	//
	//
	private synchronized TimerTask tt(){
		
		TimerTask timerTask =  new TimerTask() {
			@Override
			public void run() {
				
				serialReciver();
				//handshaking();
				cmdRun();
				
				monitoring();	
				checkformingtillend();

			}
		};
		return timerTask;
	}

	final int lastrecivedframelen=88;
	byte[] lastrecivedframe= new byte[lastrecivedframelen];
	int lrb_wr_ptr=0,lrb_rd_ptr=0;
	int framestatuse;
	
	ByteBuffer lastrecivedbuffer;
	//
	private  synchronized void timi(){
		timer = new Timer("main");
		timer.scheduleAtFixedRate(tt(), 10, 10);
	}
	//
	public synchronized void serialReciver(){
		
		if(sp==null){
			return;	
		}
		if(sp.bytesAvailable()>0){
			byte[] sb = new byte[sp.bytesAvailable()];
			sp.readBytes(sb, sb.length);
			for(byte b : sb){
				if(b==_psb){
					lastrecivedframe=new byte[lastrecivedframelen];
					lrb_wr_ptr=0;
					lastrecivedbuffer = ByteBuffer.allocateDirect(lastrecivedframelen);
					framestatuse=lastrecivedframelen;
				}else if(b==_peb){
					if(framestatuse<0){
						continue;
					}
					if(lrb_wr_ptr<1){
						continue;
					}
					byte[] ib = new byte[lrb_wr_ptr];
					System.arraycopy(lastrecivedframe, 0, ib, 0, lrb_wr_ptr);
					vcmd.addLast(ib);
					framestatuse=-1;
				}else{
					if(framestatuse<0){
						continue;
					}
					if(lrb_wr_ptr>=lastrecivedframelen){
						lrb_wr_ptr=0;
					}
					framestatuse++;
					lastrecivedframe[lrb_wr_ptr++]=b;
				}
				
			}	
				
				
			
			
		}
		
	}

	private byte[] koalication(int data,byte datahandle){
		byte[] koalicated=new byte[6];
		int temp = data;
		koalicated[0]=(byte) (temp &0x7f);
		temp=temp>>7;
		koalicated[1]=(byte) (temp &0x7f);
		temp=temp>>7;
		koalicated[2]=(byte) (temp &0x7f);
		return koalicated;
	}
	
	
	//
	//
	private synchronized void  cmdRun(){
		if(vcmd==null||vcmd.isEmpty()){
			return;
		}
		//String smd = (String)(vcmd.getFirst());
		byte[] cmd = (byte[])vcmd.getFirst();
		
		//byte[] cmd = smd.getBytes();
		vcmd.removeFirst();
		if(log!=null){
				log.addlogger("Rec : "+Arrays.toString(cmd), true);
			}
		byte inscaser=cmd[0];
		int ans=0;
		for(int i=1;i<cmd.length;i++){
			ans = ans<<7;
			ans|=(0x7f&cmd[i]);
		}
		switch(inscaser){
			case _duty:
				rduty=ans;
				break;
			//
			
				
			//
			case _name:
				handshaked = true;
				break;
			//
			case _handshake:
				if(handshaked==false){
				handshaked = true;
			
				jLabelStatus.setText("handshaked");
				}
			//serialSend(null,_handshake);
				break;
			//
			case _mode:
				
				break;
			//
			case _height:
				rheight=ans;
				
			mon.setmheight(rheight);
				break;
			//
			case _pressure:
				rpressure=ans;
				 
			
				mon.setmpressure(rpressure);
				break;
			//
			case _JobDone:
				JobsDone jd = new JobsDone();
				jd.setVisible(true);
				
				break;
			
		}
	
		
	}
		//
	private boolean serialSend(byte[] b,byte bn) {
		//return value for whether opening the streams is successful or not
		if(b==null||b.length==0)
		{
			b = new byte[1];
			b[0]=bn;
		}
		byte sb[]= makesender(b);
		/*for (int i=0; i<b.length;i++ ){
			
			sb[i] = b[i];
			
			
		}
		sb[b.length]=_eol;*/
		if (sp!=null&&sp.isOpen()) {
			
			sp.writeBytes(sb, sb.length);
			if(log!=null){
				log.addlogger("SEND : "+Arrays.toString(sb), true);
			}
			
			return true;
		}

		return false;
	}
		//
		
	private void handshaking(){
		if(!handshaked){
		if(sp!=null && sp.isOpen()){
			
			//serialSend(null,_handshake);
			//serialSend(null,_name);
		}
		}
	}
	
	//
	private void initfomponents() throws IOException{
		this.mon = new Monitor();
		this.ctrl = new Control();
		//this.al = new Alertion();
		
		this.log = new Log();
		
		this.sduty=this.ctrl.getcduty();
		//readsaveddata() ;
		/*if(this.fheight==0){
			this.fheight = this.ctrl.getfheight();
		}else{
			this.ctrl.setfheight(this.fheight );
		}
		if(this.fpressure==0){
			this.fpressure = this.ctrl.getfpressure();
		}else{
			 this.ctrl.setfpressure(this.fpressure);
		}
		if(this.rdepend ==0){
			this.rdepend=this.ctrl.getcdepend();
		}else{
			this.ctrl.setcdepend(this.rdepend );
		}*/
		
		
		
		
		showmon();
	}
	//
	private void monitoring(){
		
		if(this.mon!=null && this.ctrl!=null && connected){
			controlevent();
			showmon();
			mooder();
			 
		}
	
	}
	
	public void showmon(){
		this.sduty = this.ctrl.getcduty();
		//this.mon.setmduty(sduty);
		this.mon.setmduty(this.rduty);
		this.mon.setmheight(this.rheight);
		this.mon.setmsheight(this.sheight);
		this.fpressure = this.ctrl.getfpressure();
		this.mon.setmfpressure(this.fpressure);
		this.fheight = this.ctrl.getfheight();
		this.mon.setmfheight(this.fheight);
		this.mon.setmsheight(this.sheight);
		this.mon.setmmode(this.rmode);
		this.mon.setmpressure(this.rpressure);
		
		this.mon.setmvalve(this.rvalve);
		this.mon.setstime(this.stime);
		this.rdepend=this.ctrl.getcdepend();
		this.mon.setmdepend(this.rdepend);
		if(rmode==CHANGE_MODE_IDLE){
			
		}
		this.mon.resetmremain();
		
	}

	public void controlevent(){
		
		if(ctrl==null){
			return;
		}
		//finalizeform();
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS_PUMP)){
			//serialSend(_pwm_+ctrl.getcduty()+"\n"+_pmp_);
			
			serialSend(null,_pump);
			setmode(CHANGE_MODE_IDLE);
			serialSend(koalication(0,_pump),(byte)0);
			
		}
		//
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS_DRAIN)){
			
			serialSend(null,_dump);
			setmode(CHANGE_MODE_DRAIN);
			serialSend(koalication(0,_dump),(byte)0);
			
		}
		//
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS_STOP)){
			serialSend(null,_pause);
			setmode(CHANGE_MODE_IDLE);
			serialSend(koalication(0,_pause),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_VALUE_HPRESSURE)){
			fpressure = ctrl.getfpressure();
			serialSend(koalication(fpressure,_fpressure),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_VALUE_HHEIGHT)){
			
			fheight = ctrl.getfheight();
			serialSend(koalication(fheight,_fheight),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_DEPEND_HEIGHT)){
			rdepend = ctrl.getcdepend();
			serialSend(koalication(rdepend,_depend),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_DEPEND_PRESSURE)){
			rdepend = ctrl.getcdepend();
			serialSend(koalication(rdepend,_depend),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_SCROLL_PWM)){
			sduty=ctrl.getcduty();
			serialSend(koalication(sduty,_duty),(byte)0);
			
		}
		//
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS_PAUSE)){
			serialSend(null,_pause);
			
			setmode(CHANGE_MODE_IDLE);
			serialSend(koalication(0,_pause),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS__PUMPING)){
			serialSend(null,_pump);
			setmode(CHANGE_MODE_IDLE);
			serialSend(koalication(0,_pump),(byte)0);
		}
		//
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS_RUN)){
			setmode(CHANGE_BUTTON_PRESS_RUN);
			stime = System.currentTimeMillis();
			//serialSend(_fht_+fheight+" "+_fpr_+fpressure+" "+_dpd_+rdepend+" "+_run_);
			setmode(CHANGE_BUTTON_PRESS_RUN);
			rdepend = ctrl.getcdepend();
			serialSend(koalication(rdepend,_depend),(byte)0);
			fpressure = ctrl.getfpressure();
			serialSend(koalication(fpressure,_fpressure),(byte)0);
			//
			fheight = ctrl.getfheight();
			serialSend(koalication(fheight,_fheight),(byte)0);
			sduty=ctrl.getcduty();
			serialSend(koalication(sduty,_duty),(byte)0);
			
			//
			serialSend(null,_run);
			serialSend(koalication(0,_run),(byte)0);
			
		}
		
		if(checkbychanger(Control.CHANGE_BUTTON_PRESS_STOP)){
			serialSend(null,_pause);
			//setmode(CHANGE_MODE_IDLE);
			serialSend(koalication(0,_pause),(byte)0);
		}
		
		if(ctrl.getdrainstate()){
			//serialSend(null,_dump);
			//setmode(CHANGE_MODE_DRAIN);
		}
		
		
		ctrl.setmchange(1);
	}
	//

	private boolean checkbychanger( int checker){
		if(ctrl.getcommand()%checker==0){
			ctrl.setmchange(ctrl.getcmhange()/checker);
			return true;
		}
		return false;
	}
	//
	private synchronized void setmode(final int mp){
		
		if(this.rmode==CHANGE_MODE_IDLE){
			if(mp==CHANGE_BUTTON_PRESS_RUN){
				
				
			}
		}else if(rmode==CHANGE_BUTTON_PRESS_RUN){
			if(mp==CHANGE_MODE_IDLE){
				
				//serialSend(null,_pause);
			}
		}
			
			
		this.rmode=mp;
	}
	//
	
	
	
	
	private synchronized void mooder(){
		if(rmode==CHANGE_BUTTON_PRESS_RUN){
			mon.resetmremain();
			if((rheight-sheight)>=fheight){
				setmode(CHANGE_MODE_IDLE);
			}
		}else{
			sheight=rheight;
		}
			
	}
	//
	private void savingdata() {
		
		OutputStream fos = null;
		try {
			fos = new FileOutputStream(FILE_NAME);
			fos.write(datastringmaker().getBytes());
			fos.close();
		} catch (FileNotFoundException ex) {
			Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
		} finally {
			try {
				fos.close();
			} catch (IOException ex) {
				Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}
	private String datastringmaker(){
		String s ="";
		s+="F\n";
		s+="P"+fpressure+"\n";
		s+="H"+fheight+"\n";
		s+="D"+rdepend+"\n";
		s+="F\n";
		return s;
	}
	
	private void readsaveddata() {
		
		InputStream fis;
		try {
			fis = new FileInputStream(FILE_NAME);
			char[] b;
		int counter=0;
		if(fis!=null){
			if(fis.available()>0)
			{
				b=new char[200];
				b[counter]= (char)(fis.read());
				while(b[counter]>0&&counter<b.length-2){
					counter++;
					b[counter]= (char)(fis.read());
				}
				int i =0,j=1;
				String prs="",hrs="",dps="";
				while(i<counter){
					if(b[i]=='P'){
						while(b[i+j]!='\n'){
							prs+=b[i+j];
							j++;
						}
						j=1;
					}
					//
					
					if(b[i]=='H'){
						while(b[i+j]!='\n'){
							hrs+=b[i+j];
							j++;
						}
						j=1;
					}
					//
					if(b[i]=='D'){
						while(b[i+j]!='\n'){
							dps+=b[i+j];
							j++;
						}
						j=1;
					}
					i++;
				}
				
				if(hrs.length()>0){
					fheight=Integer.parseInt(hrs);
					ctrl.setfheight(fheight);
				}
				//
				if(prs.length()>0){
					fpressure=Integer.parseInt(prs);
					ctrl.setfpressure(fpressure);
				}
				//
				if(hrs.length()>0){
					rdepend=Integer.parseInt(dps);
					ctrl.setcdepend(rdepend);
				}
				
			}
		}
		fis.close();
		} catch (FileNotFoundException ex) {
			FileOutputStream fos;
			try {
				fos = new FileOutputStream(FILE_NAME);
				fos.close();
			} catch (FileNotFoundException ex1) {
				Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex1);
			} catch (IOException ex1) {
				Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex1);
			}
				
		} catch (IOException ex) {
			Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}
	
	
	
	
	
	private synchronized byte[]   makesender(byte[] sb){
		byte[] bts= new byte[sb.length+2];
		bts[0]=_psb;
		bts[bts.length-1]= _peb;
		System.arraycopy(sb, 0, bts, 1, sb.length);
		return bts;
	
	}
	//
	//
	private void checkformingtillend(){
		if(rheight>=fheight-sheight){
			finished();
		}
	}
	
	private void finished(){
		serialSend(null,_pause);
		setmode(CHANGE_MODE_IDLE);
	}
	
	final byte _psb = (byte)(0x80);
	final byte _peb = (byte)0x90;
	Control ctrl = null;
	Monitor mon = null;
	Log log = null;
	Vector vcmd;
	Timer timer;
	public int BaudRate = 115200;
	public int DataBits = 8;
	public int StopBits = SerialPort.ONE_STOP_BIT;
	public int Parity = SerialPort.NO_PARITY;
	public SerialPort sp;
	
	public boolean  handshaked = false;
	boolean connected = false;
	//
	
	//
	final byte _pump = 'P';
	final byte _dump = 'D';
	final byte _run = 'R';
	final byte _pause = 'S';
	final byte _fheight = 'h';
	final byte _fpressure = 'p';
	final byte _depend = 'd';
	final byte _duty = 'c';
	final byte _handshake = 'H';
	final byte _name = 'N';
	final byte _height = 'C';
	final byte _pressure = 'f';
	final byte _mode = 'm';
	final byte _Mode = 'M';
	final byte _JobDone = 'J';
	private  int rpressure=0;
	private  int rheight=0;
	private  int rduty=0;
	private  int sduty=0;
	private  int rmode=0;
	private  int rvalve=0;
	private  int rdepend=0;
	private  int rremained=100;
	private  int fheight =0;
	private  int fpressure=0;
	private  int sheight =0;
	private  int spressure=0;
	long stime=0;
	
	public static final String FILE_NAME ="forming.txt";
	public static final int ALETION_CHOOSE = 2;
	public static final int IDLE = 1;
	public static final int NONE = 0;
	public static final int CHANGE_MODE = 2;
	public static final int CHANGE_DEPEND_PRESSURE = 3;
	public static final int CHANGE_DEPEND_HEIGHT = 5;
	public static final int CHANGE_BUTTON_PRESS_RUN = 7;
	//public static final int CHANGE_BUTTON_RELEASE_RUN = 11;
	public static final int CHANGE_BUTTON_PRESS_STOP = 13;
	//public static final int CHANGE_BUTTON_RELEASE_STOP = 17;
	public static final int CHANGE_BUTTON_PRESS_PUMP = 23;
	//public static final int CHANGE_BUTTON_RELEASE_PUMP = 29;
	public static final int CHANGE_BUTTON_PRESS_PAUSE = 31;
	//public static final int CHANGE_BUTTON_RELEASE_PAUSE = 37;
	public static final int CHANGE_BUTTON_PRESS_DRAIN = 41;
	//public static final int CHANGE_BUTTON_RELEASE_DRAIN = 47;
	public static final int CHANGE_BUTTON_PRESS__PUMPING = 53;
	//public static final int CHANGE_BUTTON_RELEASE_PUMPING = 59;
	//public static final int CHANGE_SCROLL_PWM_PRESS = 61;
	//public static final int CHANGE_SCROLL_PWM_RELEASE = 67;
	public static final int CHANGE_SCROLL_PWM = 71;
	public static final int CHANGE_VALUE_HPRESSURE = 73;
	public static final int CHANGE_VALUE_HHEIGHT = 79;
	
	//public static final int CHANGE_MODE_PAUSE = 103;
	public static final int CHANGE_MODE_CONNECTING = 67;
	public static final int CHANGE_MODE_HANDSHAKING = 61;
	public static final int CHANGE_MODE_IDLE = 83;
	public static final int CHANGE_MODE_DRAIN = 97;
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenu MenuConnect;
        private javax.swing.JMenuItem MenuItemCheckConnection;
        private javax.swing.JMenuItem MenuItemCloseConnection;
        private javax.swing.JMenuItem MenuItemRefresh;
        private javax.swing.JMenuItem aboutMenuItem;
        private javax.swing.JMenuItem contentsMenuItem;
        private javax.swing.JMenuItem exitMenuItem;
        private javax.swing.JMenu fileMenu;
        private javax.swing.JMenu helpMenu;
        private javax.swing.JLabel jLabelStatus;
        private javax.swing.JLabel jLabelWrite;
        private javax.swing.JMenuItem jMenuItem1;
        private javax.swing.JMenuItem jMenuItemLog;
        private javax.swing.JMenu jMenuPorts;
        private javax.swing.JOptionPane jOptionPaneOk;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel22;
        private javax.swing.JPanel jPanel23;
        private javax.swing.JMenuBar menuBar;
        private javax.swing.JMenuItem openMenuItem;
        private javax.swing.JMenuItem saveAsMenuItem;
        private javax.swing.JMenuItem saveMenuItem;
        // End of variables declaration//GEN-END:variables

}
